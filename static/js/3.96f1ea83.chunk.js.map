{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Posts.module.css","components/Profile/ProfileInfo/ProfileStatus/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/Posts.tsx","components/Profile/MyPosts/PostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatus","useState","status","setStatus","editMode","setEditMode","useEffect","type","onChange","event","currentTarget","value","onBlur","updateStatus","autoFocus","onDoubleClick","ProfileInfo","className","classes1","descriptionPost","src","profile","photos","large","alt","Post","item","message","likesCount","maxLengthPost","maxLengthCreator","Posts","React","memo","posts","map","p","id","classes","postsBlock","AddPostFormRedux","onSubmit","values","addPost","newPostBody","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","required","PostsContainer","profilePage","newPost","newPostText","dispatch","Profile","content","ProfileContainer","userID","this","match","params","authorizedUserID","toString","history","push","getUserProfile","getProfileStatus","compose","withRouter"],"mappings":"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","file":"static/js/3.96f1ea83.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreReduxType} from \"../redux/redux-store\";\r\n\r\n\r\ntype MSTPType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToProps = (state: StoreReduxType): MSTPType => {\r\n    return  {isAuth: state.auth.isAuth}\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    function RedirectComponent (props: MSTPType) {\r\n        const {isAuth, ...restProps} = props\r\n        if (!isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T} />\r\n    }\r\n\r\n    return connect(mapStateToProps)(RedirectComponent)\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionPost\":\"ProfileInfo_descriptionPost__2R1kc\",\"img\":\"ProfileInfo_img__28XKy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2yFfh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Posts_content__1J-i_\",\"postsBlock\":\"Posts_postsBlock__3JR_w\",\"posts\":\"Posts_posts__3ne2E\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus: React.FC<ProfileStatusType> = (props) => {\r\n\r\n    const [status, setStatus] = useState(props.status)\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const ChangeModeOn = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const ChangeModeOff = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode ?\r\n                <div>\r\n                    <input type=\"text\" onChange={onStatusChange} onBlur={ChangeModeOff} autoFocus={true}\r\n                           value={status}/>\r\n                </div> :\r\n                <div>\r\n                    <span onDoubleClick={ChangeModeOn}>{props.status || \"------\"}</span>\r\n                </div>}\r\n\r\n\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport classes1 from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatus} from \"./ProfileStatus/ProfileStatus\";\r\n\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoType) {\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img className={classes1.img}*/}\r\n            {/*        src={'https://cdn.iz.ru/sites/default/files/styles/900x506/public/news-2019-05/TASS_7803732.jpg?itok=6sNpt6vA'}/>*/}\r\n            {/*</div>*/}\r\n            <div className={classes1.descriptionPost}>\r\n                <img src={props.profile ? props.profile.photos.large:'' } alt=\"User photo\"/>\r\n                <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport classes1 from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nfunction Post(props:PostType) {\r\n    return (\r\n        <div className={classes1.item}>\r\n            <img src={'https://upload.wikimedia.org/wikipedia/commons/c/c3/%D0%9F%D0%B0%D1%82%D1%80%D0%B8%D0%B0%D1%80%D1%85_%D0%9A%D0%B8%D1%80%D0%B8%D0%BB%D0%BB_%D0%BD%D0%B0_%D0%B2%D1%81%D1%82%D1%80%D0%B5%D1%87%D0%B5_%D1%81_%D0%9F%D0%B0%D1%82%D1%80%D0%B8%D0%B0%D1%80%D1%85%D0%BE%D0%BC_%D0%A4%D0%B5%D0%BE%D1%84%D0%B8%D0%BB%D0%BE%D0%BC_III_%D0%B8_%D0%92%D0%BB%D0%B0%D0%B4%D0%B8%D0%BC%D0%B8%D1%80%D0%BE%D0%BC_%D0%9F%D1%83%D1%82%D0%B8%D0%BD%D1%8B%D0%BC.jpg'}/>\r\n            <>{props.message}</>\r\n                <div>\r\n                <span> <>{props.likesCount}</> like</span>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from \"./Post/Post\";\r\nimport classes from './Posts.module.css'\r\nimport {PostType} from \"../../../redux/state\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../assets/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormControls\";\r\n\r\n\r\ntype PostsTypePage = {\r\n    addPost: (newPost: string) => void\r\n    posts: Array<PostType>\r\n    newPost: string\r\n}\r\n\r\ntype AddPostFormType = {\r\n    newPostBody: string\r\n}\r\n\r\nconst maxLengthPost = maxLengthCreator(10)\r\n\r\nconst Posts = React.memo((props: PostsTypePage) => {\r\n\r\n    const posts = props.posts.map(p => { return(\r\n        <Post key={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n    })\r\n\r\n    const addNewPost = (values: AddPostFormType) => {\r\n            props.addPost(values.newPostBody)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddPostFormRedux onSubmit={addNewPost}/>\r\n            <div className={classes.posts}>\r\n                {posts}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Posts;\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<AddPostFormType>> = (props) => {\r\n   return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field component={Textarea} name={'newPostBody'} validate={[required,maxLengthPost]}/>\r\n        </div>\r\n        <div>\r\n            <button>App post</button>\r\n        </div>\r\n    </form>\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<AddPostFormType>({\r\n    form: 'AddPost'\r\n})(AddPostForm)\r\n","import React from 'react';\r\nimport Posts from \"./Posts\";\r\nimport {connect} from \"react-redux\";\r\nimport {ActionsTypes, StoreReduxType} from \"../../../redux/redux-store\";\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\n\r\nconst mapStateToProps= (state: StoreReduxType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPost: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: (action: ActionsTypes) => void) => {\r\n    return {\r\n        addPost: (newPost: string)=>dispatch(addPost(newPost)),\r\n    }\r\n}\r\n\r\nconst PostsContainer = connect(mapStateToProps, mapDispatchToProps)(Posts)\r\n\r\nexport default PostsContainer;\r\n","import React from 'react';\r\nimport classes1 from './Profile.module.css';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport PostsContainer from \"./MyPosts/PostsContainer\";\r\nimport {ProfileType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfileFCType = {\r\n    profile: ProfileType | null\r\n    updateStatus: (status: string) => void\r\n    status: string\r\n}\r\n\r\nconst Profile = (props: ProfileFCType) => {\r\n\r\n    return (\r\n        <div className={classes1.content}>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <PostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {StoreReduxType} from \"../../redux/redux-store\";\r\nimport {withRouter} from 'react-router-dom'\r\nimport {RouteComponentProps} from \"react-router\";\r\nimport {getProfileStatus, getUserProfile, ProfileType, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {compose} from \"redux\"\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\n\r\n\r\ntype MSTPType = {\r\n    profile: ProfileType| null\r\n    status: string\r\n    authorizedUserID: number|null\r\n    isAuth: boolean\r\n}\r\ntype MDTPType = {\r\n    getUserProfile: (userID: string) => void\r\n    getProfileStatus: (userID: string) => void\r\n    updateStatus: (status: string) => void\r\n}\r\ntype PathParamsType = {\r\n    userID: string,\r\n    history: string\r\n}\r\n\r\ntype ConnectPropsType = MSTPType & MDTPType\r\ntype ProfileContainerType = RouteComponentProps<PathParamsType>&ConnectPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType, {}>{\r\n\r\n    componentDidMount() {\r\n        debugger\r\n        let userID = this.props.match.params.userID\r\n        if (!userID){\r\n            if(this.props.authorizedUserID) {\r\n                userID = this.props.authorizedUserID.toString()\r\n                if(!userID) {\r\n                    this.props.history.push('/login')\r\n                }\r\n            }\r\n        }\r\n        this.props.getUserProfile(userID)\r\n        this.props.getProfileStatus(userID)\r\n    }\r\n\r\n\r\n    render() {\r\n        return <Profile profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: StoreReduxType): MSTPType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserID: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport default compose <React.ComponentType>(\r\n    connect (mapStateToProps, {getUserProfile, getProfileStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}